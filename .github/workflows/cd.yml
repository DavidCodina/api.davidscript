name: Deploy

on:
  # The Deploy workflow push event should only be triggered through merging a pull request.
  # Branch protection is set up on GitHub to prevent directly pushing to main or master.
  # Additionally, branch proetection requires Build, Lint and Test status checks to pass before
  # merging.
  #^ Automatically deploying on PR merge may be something you want,
  #^ but I prefer to always dispatch it manually.
  # push:
  #   branches:
  #     - main
  #     - master

  workflow_dispatch:

env:
  NODE_ENV: development # For `Run Build` step to pass
  PORT: 5000

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - name: Install Dependencies
        run: npm ci
      - name: Build Project
        run: npm run build
        # https://www.udemy.com/course/github-actions-the-complete-guide/learn/lecture/34139932#overview
      - name: Upload Build Artifacts
        # https://github.com/actions/upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
      # - name: Simulate build job failure
      #   run: exit 1
      - name: Run Build to Check for Errors
        run: |
          npm start & sleep 2
          pkill -f "node dist/index.js"
          echo "Build check completed."

  deploy:
    needs: [build]
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - name: Download Build Artifacts
        # https://github.com/actions/download-artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      # - name: Verify dist artifact contents
      #   run: ls
      - name: Install Dependencies
        run: npm ci
      - name: Create Deployment Package
        # This assumes bestzip is in package.json dependencies.
        run: npx bestzip upload.zip dist/* package.json
      # - name: Simulate deploy job failure
      #   run: exit 1
      - name: Configure AWS credentials
        # https://github.com/aws-actions/configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # The aws-cli comes pre-installed on GitHub Actions' Ubuntu runners, including ubuntu-latest. This means you don't
      # need to install any additional tools for the aws lambda command to work in your GitHub workflow.
      # Note: the Lambda function would not be created automatically if it didn't exist, you would encounter an error.
      # To create a new Lambda function, you would need to use the aws lambda create-function command.
      - name: Deploy to Lambda
        id: deploy-to-lambda
        run: |
          aws lambda update-function-code \
            --function-name davidscript-server \
            --zip-file fileb://upload.zip

  success:
    name: Deploy Success
    needs: deploy
    # Only run when the deploy job was successful.
    if: ${{ needs.deploy.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Log Success
        run: echo "Success!"

  failure:
    name: Deploy Failure
    needs: deploy
    # Run when ANY job in Deploy workflow produces failure, but wait on build & deploy.
    if: failure() || needs.build.result == 'failure'
    runs-on: ubuntu-latest
    steps:
      - name: Log Failure
        # In a production app, a more practical approach in the 'failure'
        # case would be to log the error details, notify the team, or trigger a rollback.
        run: echo "Failure!"
# https://docs.github.com/en/actions/learn-github-actions/contexts
# bonus:
#   needs: deploy
#   name: Bonus
#   runs-on: ubuntu-latest
#   steps:

#     - name: Bonus - output context of github
#       run: echo "${{ toJSON(github) }}"
