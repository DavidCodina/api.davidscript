# https://docs.github.com/en/actions/using-workflows
# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request
name: Build, Lint, Test

on:
  #--------------------------------------------------------------------------
  #
  # Note:
  #
  # https://www.udemy.com/course/github-actions-the-complete-guide/learn/lecture/34138630#overview
  # Pull Request from contributors that forked will not occur automatically, but instead require approval.
  # Why? Because obviously you don't want to automatically deploy from forked users.
  # By default, pull requests based on forks do not trigger workflows.
  # First-time contributors must be approved manually. Subsequent PRs will be triggered
  # automatically. That said, if you add a collaborator and they do a first PR, it will
  # trigger automatially on the first time.
  #
  #--------------------------------------------------------------------------

  # Currently, there is no branch protection on `development`. However, in a production app
  # we definitely want to prevent direct pushes to `development` and ensure that the Build,
  # Lint and Test status checks pass before merging.
  pull_request:
    branches:
      - main
      - master
      - development # 'dev*'
      - dev
  workflow_dispatch:

env:
  NODE_ENV: development # For `Run Build` step to pass.
  PORT: 5000
  # MONGO_URI: mongodb://localhost:27017/demo

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
      - name: Cache Dependencies
        id: cache
        uses: actions/cache@v4 # https://github.com/actions/cache
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-lock.json') }}
      - name: Check Cache Status
        run: echo "Cache hit: ${{ steps.cache.outputs.cache-hit }}"
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build Project
        #--------------------------------------------------------------------------
        #
        # The package.json build command bakes in a typescript check and returns early if there are errors.
        # This build command is pretty strict. If there is a single typescript error, it will fail.
        #
        #   "build": "npm run typescript && node esbuild.config.mjs",
        #   "typescript": "tsc --noEmit",
        #
        # Because the lint job is set up to error out on warnings, it's likely that
        # in many cases a Typescript error will also cause an error in the lint job.
        #
        #--------------------------------------------------------------------------
        run: npm run build
        # https://www.udemy.com/course/github-actions-the-complete-guide/learn/lecture/34139932#overview
      - name: Upload Build Artifacts
        # https://github.com/actions/upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
      - name: Run Build to Check for Errors
        run: |
          npm start & sleep 2
          pkill -f "node dist/index.js"
          echo "Build check completed."

  lint:
    # The actual name used here is important because it allows us to search for
    # the correct status check when Requiring status checks to pass before merging.
    # This is set up in GitHub branch --> Settings --> Branches.
    name: Lint
    runs-on: ubuntu-latest

    steps:
      # https://github.com/marketplace/actions/checkout
      # https://github.com/actions/checkout
      - uses: actions/checkout@v4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Cache Dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Lint src
        # This will only fail if it encounters "error" not "warn" : run: npm run lint
        # This will cause ESLint to exit with a non-zero status code if any warnings are found.
        run: npx eslint src --max-warnings=0

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
      - name: Cache Dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Run Tests
        run: npm test
