name: Deploy

on:
  push:
    # The Deploy workflow push event should only be triggered through merging a pull request.
    # Branch protection is set up on GitHub to prevent directly pushing to main or master.
    # Additionally, branch proetection requires Build, Lint and Test status checks to pass before
    # merging.

    branches:
      - main
      - master

  workflow_dispatch:

env:
  NODE_ENV: development # For `Run Build` step to pass
  PORT: 5000

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      # Cache dependencies. Must be done in all jobs that install dependencies.
      # This seems to speed up the process by about 20s.
      # https://www.udemy.com/course/github-actions-the-complete-guide/learn/lecture/34139976#overview
      - name: Cache Dependencies
        # https://github.com/actions/cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: node_modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install Dependencies
        run: npm ci
      - name: Build Project
        run: npm run build
        # https://www.udemy.com/course/github-actions-the-complete-guide/learn/lecture/34139932#overview
      - name: Upload Build Artifacts
        # https://github.com/actions/upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

      - name: Run Build to Check for Errors
        run: |
          npm start & sleep 2
          pkill -f "node dist/index.js"
          echo "Build check completed."

  deploy:
    needs: [build]
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Download Build Artifacts
        # https://github.com/actions/download-artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      # - name: Verify dist artifact contents
      #   run: ls

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: node_modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        run: npm ci

      - name: Create Deployment Package
        # This assumes bestzip is in package.json dependencies.
        run: npx bestzip upload.zip dist/* package.json

      - name: Configure AWS credentials
        # https://github.com/aws-actions/configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # The aws-cli comes pre-installed on GitHub Actions' Ubuntu runners, including ubuntu-latest. This means you don't
      # need to install any additional tools for the aws lambda command to work in your GitHub workflow.
      # Note: the Lambda function would not be created automatically if it didn't exist, you would encounter an error.
      # To create a new Lambda function, you would need to use the aws lambda create-function command.
      #
      # If you wanted to run logic to creat or update it would look something like this, but this is still just example code:
      #
      # - name: Check if Lambda Function Exists
      #   id: check-lambda
      #   run: |
      #     aws lambda get-function --function-name davidscript-server || echo "NOT_FOUND"

      # - name: Create or Update Lambda Function
      #   run: |
      #     if [ "${{ steps.check-lambda.outputs.stdout }}" == "NOT_FOUND" ]; then
      #       echo "Creating Lambda function"
      #       aws lambda create-function \
      #         --function-name davidscript-server \
      #         --runtime nodejs22.x \
      #         --role arn:aws:iam::account-id:role/execution_role \
      #         --handler index.handler \
      #         --zip-file fileb://upload.zip \
      #         --description "My Lambda function for deploying server" \
      #         --timeout 15 \
      #     else
      #       echo "Updating Lambda function"
      #       aws lambda update-function-code \
      #         --function-name davidscript-server \
      #         --zip-file fileb://upload.zip
      #     fi

      - name: Deploy to Lambda
        id: deploy-to-lambda
        run: |
          aws lambda update-function-code \
            --function-name davidscript-server \
            --zip-file fileb://upload.zip

  #--------------------------------------------------------------------------
  #
  # We could do a failure check at the step level, but then that would tell us
  # nothing if the build job failed:
  #
  # distinct success and failure jobs
  # - name: Deployment Result
  #   if: always()
  #   run: |
  #     if [ "${{ steps.deploy-to-lambda.conclusion }}" == "success" ]; then
  #       echo "Success!"
  #     elif [ "${{ steps.deploy-to-lambda.conclusion }}" == "failure" ]; then
  #       echo "Failure!"
  #     fi
  #
  # A better/cleaner approach is to have distinct
  #
  #--------------------------------------------------------------------------

  success:
    name: Deployment Success
    if: success()
    run: echo "Success!"

  failure:
    name: Deployment Success
    if: failure()
    # In a production app, a more practical approach in the 'failure'
    # case would be to log the error details, notify the team, or trigger a rollback.
    run: echo "Failure!"

  # bonus:
  #   needs: deploy
  #   name: Bonus
  #   runs-on: ubuntu-latest
  #   steps:
  #     # https://docs.github.com/en/actions/learn-github-actions/contexts
  #     - name: Bonus - output context of github
  #       run: echo "${{ toJSON(github) }}"
