name: Deploy

on:
  push:
    # test.yml runs when a pull_request happens in main or master.
    # In such cases, IF the pull request is then merged,

    # it may result in a push event into main or master,
    # which will then trigger this workflow.
    branches:
      - main
      - master

  workflow_run:
    workflows: ['Build, Lint, Test'] # This must match the name in test.yml exactly
    types:
      - completed
    branches:
      - main
      - master

  # Manually running the workflow will necessarily result in an error such that:
  # Unable to download artifact(s): Artifact not found for name: dist
  # However, we set continue-on-error: true, and if the dist folder isn't found from
  # downloading the artificat, then we build it.
  workflow_dispatch:

jobs:
  check-conclusion:
    name: Check Conclusion
    runs-on: ubuntu-latest
    steps:
      - name: Log Event Payload
        run: |
          echo "Event payload:"
          echo "${{ toJSON(github.event) }}"

      - name: Extract and Log Conclusion
        run: |
          conclusion=${{ github.event.workflow_run.conclusion }}
          echo "Event conclusion: $conclusion"

  should-deploy:
    runs-on: ubuntu-latest
    # || github.event_name == 'push'
    if: |
      github.event.workflow_run.conclusion == 'success' ||  
      github.event_name == 'workflow_dispatch'
    steps:
      - run: echo "Proceeding with deployment..."

  deploy:
    needs: should-deploy
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      # Attempt to download the artifact
      - name: Download Build Artifacts
        id: download-artifact
        continue-on-error: true # Allow the workflow to continue if this fails
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      # Check if dist folder exists and has contents
      - name: Check dist folder
        id: check-dist
        run: |
          if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
            echo "dist_exists=true" >> $GITHUB_OUTPUT
          else
            echo "dist_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: node_modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        run: npm ci

      - name: Build Project
        if: steps.check-dist.outputs.dist_exists != 'true'
        run: npm run build

      # - name: Verify dist artifact contents
      #   run: ls

      - name: Create Deployment Package
        # Assumes a package.json script of:
        # "zip": "bestzip upload.zip dist/* package.json",
        run: npm run zip

      - name: Configure AWS credentials
        # https://github.com/aws-actions/configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # The aws-cli comes pre-installed on GitHub Actions' Ubuntu runners, including ubuntu-latest. This means you don't
      # need to install any additional tools for the aws lambda command to work in your GitHub workflow.
      - name: Deploy to Lambda
        run: |
          aws lambda update-function-code \
            --function-name davidscript-server \
            --zip-file fileb://upload.zip

  # bonus:
  #   needs: deploy
  #   name: Bonus
  #   runs-on: ubuntu-latest
  #   steps:
  #     # https://docs.github.com/en/actions/learn-github-actions/contexts
  #     - name: Bonus - output context of github
  #       run: echo "${{ toJSON(github) }}"
